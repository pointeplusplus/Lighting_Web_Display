<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js canvas - geometry - cube</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				font-family: Monospace;
				background-color: #f0f0f0;
				margin: 0px;
				overflow: hidden;
			}
		</style>
	</head>
	<body>
		<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
		<script src="./objFileContents.js"></script>
		<script src="../build/three.min.js"></script>

		<script src="../js/libs/stats.min.js"></script>

		<script>

			
            objFileContents.fetch();
            objFileContents.parse();
            console.log(objFileContents.vectors);
            //objFileContents.print($("body"));
           

			var container, stats;

			var camera, scene, renderer;

			//stores data found in obj file
			var v = [];
			var vt = [];
			var vn = [];
			var o;
			var debug_counter = 0;
			var debug_v_counter = 0;

			//meshes for different items
			var wall1, wall2,plane;
			var mesh;

			var targetRotation = 0;
			var targetRotationOnMouseDown = 0;

			var mouseX = 0;
			var mouseXOnMouseDown = 0;

			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;

			//geometry for the faces
			var geometry;

			init();
			animate();

			
			function getData(){

				geometry = new THREE.Geometry();

				//loop through the arrays from the file data and analyze their contents
				//start at 1 because line 1 is the name of the .mtl file 
				console.log("This is right before the for loop");
				console.log(objFileContents.vectors);
				console.log(objFileContents.vectors.length);
				for(o = 1; o < objFileContents.vectors.length; o++){
					debug_counter++;
					//new vertex defined on this line 
					if(objFileContents.vectors[o][0] == "v"){
						debug_counter++;
						//use v.length to add one to the length and add x,y, and z components

						//console.log("This is inside the loop.");
						//console.log(o);
						v.push(new Array());
						//console.log("This is after a new array was created");

						v[v.length-1].push(objFileContents.vectors[o][1]);
						v[v.length-1].push(objFileContents.vectors[o][2]);
						v[v.length-1].push(objFileContents.vectors[o][3]);
						//console.log("This is after pushing vertices");

						//failed attempt to store vertex coordinates in a vector (part 2)
						//v[v.length-1][0] = objFileContents.vectors[o][1];
						//v[v.length-1][1] = objFileContents.vectors[o][2];
						//v[v.length-1][2] = objFileContents.vectors[o][3];
						//console.log("This is after adding vertices");

						//how I would like to add vertices to the geometry
						geometry.vertices.push( new THREE.Vector3( 50*v[v.length-1][0], 50*v[v.length-1][1], 50*v[v.length-1][2]) ); 
						//console.log("this is after adding a vertex to the geometry");
						

					}
					else if(objFileContents.vectors[o][0] == "vt"){
						//vt.push("vt");
						//vt[vt.length-1].x = objFileContents.vectors[o][1];
						//vt[vt.length-1].y = objFileContents.vectors[o][2];
					}
					else if(objFileContents.vectors[o][0] == "vn"){
						//vn.push("vn");
						//vn[vn.length].x = objFileContents.vectors[o][1];
						//vn[vn.length].y = objFileContents.vectors[o][2];
						//vn[vn.length].z = objFileContents.vectors[o][3];
					}
					//adding a new face
					else if(objFileContents.vectors[o][0] == "f"){
						//console.log("Face: " +o);
						//console.log("I found a face");
						//format is #/#/#.  Pull apart to only grab # in temp_vertex_*[0]
						//console.log(objFileContents.vectors[o][1]);
						var temp_vertex_1 = objFileContents.vectors[o][1];
						//console.log(temp_vertex_1);
						//console.log(objFileContents.vectors[o][2]);
						var temp_vertex_2 = objFileContents.vectors[o][2];
						
						var temp_vertex_3 = objFileContents.vectors[o][3];
						temp_vertex_1 = temp_vertex_1.split("/");
						//console.log(temp_vertex_1[0]);
						temp_vertex_2 = temp_vertex_2.split("/");
						//console.log(temp_vertex_2[0]);
						temp_vertex_3 = temp_vertex_3.split("/");
						//console.log(temp_vertex_3[0]);
						//using -1 because the vertices are 1-indexed
						geometry.faces.push( new THREE.Face3(temp_vertex_1[0]-1,temp_vertex_2[0]-1,temp_vertex_3[0]-1 ) );
					}
				}
				/*
				//var vertex_loop = 0;
				console.log(geometry.vertices.length);
				//This for loop tests to make sure the vertices look correct
				
				for(var vertex_loop = 50; vertex_loop < 55; vertex_loop++){
					console.log("Vertex: " + vertex_loop);
					console.log(geometry.vertices[vertex_loop]);
				}
							
				
				console.log(geometry.faces.length);
				for(var face_loop = 0; face_loop < 6; face_loop++){
					console.log(geometry.faces[face_loop]);
				}
				*/

				geometry.computeCentroids();
    			geometry.computeFaceNormals();
    			geometry.computeVertexNormals();	
			}
			
			function init() {

				container = document.createElement( 'div' );
				document.body.appendChild( container );

				var info = document.createElement( 'div' );
				info.style.position = 'absolute';
				info.style.top = '10px';
				info.style.width = '100%';
				info.style.textAlign = 'center';
				info.innerHTML = 'Drag to spin the cube';
				container.appendChild( info );

				camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.y = 15;
				camera.position.z = 45;
				camera.rotation.y = 0;

				scene = new THREE.Scene();
				debug_counter = 20;
				getData();
				for ( var i = 0; i < geometry.faces.length; i += 1 ) {

					var hex = Math.random() * 0xffffff;
					geometry.faces[ i ].color.setHex( hex );
					//geometry.faces[ i + 1 ].color.setHex( hex );

				}

				var material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, overdraw: 0.5 } );
				mesh = new THREE.Mesh( geometry, material );
				material.side = THREE.DoubleSide;
        		mesh.doubleSided = true;
				mesh.position.y = 0;
				mesh.position.z = 0;
				mesh.rotation.y = 0;
        		scene.add(mesh);

				/*
				//Single triangle
				var triangleGeometry = new THREE.Geometry();
				triangleGeometry.vertices.push( new THREE.Vector3( 0.0,0.0,1.0) );
				triangleGeometry.vertices.push( new THREE.Vector3( -10.0,5.0,0.0) );
				triangleGeometry.vertices.push( new THREE.Vector3( 5.0,10.0,5.0) );
				triangleGeometry.faces.push( new THREE.Face3(0,1,2 ) );
				var hex = Math.random() * 0xffffff;
				triangleGeometry.faces[ 0 ].color.setHex( hex );
				Tmesh = new THREE.Mesh( triangleGeometry, material );
				scene.add(Tmesh);
				
				
				
				// Wall 1

				var wall1Geometry = new THREE.CubeGeometry( 2, 10, 12 );

				for ( var i = 0; i < wall1Geometry.faces.length; i += 2 ) {

					var hex = Math.random() * 0xffffff;
					wall1Geometry.faces[ i ].color.setHex( hex );
					wall1Geometry.faces[ i + 1 ].color.setHex( hex );

				}

				var material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, overdraw: 0.5 } );

				wall1 = new THREE.Mesh( wall1Geometry, material );
				wall1.position.y = 5;
				wall1.position.z = 10;
				wall1.rotation.y =  - 0.1
				scene.add( wall1 );

				// Wall 2

				var wall2Geometry = new THREE.CubeGeometry(2, 10, 8);

				//var material = new THREE.MeshBasicMaterial( { color: 0xddff44, overdraw: 0.5 } );
				var material = new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'textures/pointe.jpg' ) } );
			


				wall2 = new THREE.Mesh( wall2Geometry, material );
				wall2.position.y = 5;
				wall2.position.z = 10;
				wall2.position.x = 10;
				wall1.rotation.y =  0.1;
				scene.add( wall2 );
				
				// Plane

				//gives x and y coordinates
				var floorGeometry = new THREE.PlaneGeometry( 30, 30 );

				//rotates plane to be in the x-z plane
				floorGeometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );

				//var material = new THREE.MeshBasicMaterial( { color: 0xff0000, overdraw: 0.5 } );
				var material = new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( '../textures/yosemite.jpg' ) } );


				plane = new THREE.Mesh( floorGeometry, material );
				scene.add( plane );
				*/

				renderer = new THREE.CanvasRenderer();
				renderer.setSize( window.innerWidth, window.innerHeight );

				container.appendChild( renderer.domElement );

				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				container.appendChild( stats.domElement );

				document.addEventListener( 'mousedown', onDocumentMouseDown, false );
				document.addEventListener( 'touchstart', onDocumentTouchStart, false );
				document.addEventListener( 'touchmove', onDocumentTouchMove, false );

				//

				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {

				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			//
			function onDocumentMouseDown( event ) {

				event.preventDefault();

				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				document.addEventListener( 'mouseup', onDocumentMouseUp, false );
				document.addEventListener( 'mouseout', onDocumentMouseOut, false );

				mouseXOnMouseDown = event.clientX - windowHalfX;
				targetRotationOnMouseDown = targetRotation;

			}

			function onDocumentMouseMove( event ) {

				mouseX = event.clientX - windowHalfX;

				targetRotation = targetRotationOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.02;

			}

			function onDocumentMouseUp( event ) {

				document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
				document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
				document.removeEventListener( 'mouseout', onDocumentMouseOut, false );

			}

			function onDocumentMouseOut( event ) {

				document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
				document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
				document.removeEventListener( 'mouseout', onDocumentMouseOut, false );

			}

			function onDocumentTouchStart( event ) {

				if ( event.touches.length === 1 ) {

					event.preventDefault();

					mouseXOnMouseDown = event.touches[ 0 ].pageX - windowHalfX;
					targetRotationOnMouseDown = targetRotation;

				}

			}

			function onDocumentTouchMove( event ) {

				if ( event.touches.length === 1 ) {

					event.preventDefault();

					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					targetRotation = targetRotationOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.05;

				}

			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();
				stats.update();

			}

			function render() {

				//wall1.rotation.y += ( targetRotation - wall1.rotation.y ) * 0.05;
				//plane.rotation.y = wall1.rotation.y;
				camera.rotation.y += ( targetRotation - camera.rotation.y ) * 0.05;
				renderer.render( scene, camera );

			}

		

		</script>

	</body>
</html>
